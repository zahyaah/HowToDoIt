1) Pattern 1 (File -> Pattern1.cpp)

Ask the user for the number of rows and columns and print the following pattern. 

00 01 02 03 
10 11 12 13 
20 21 22 23 

---------------------------------------------------------------------------------------------------------------------------------------------------------

2) Pattern 2 (File -> Pattern2.cpp)

Ask the user for the number of rows and columns and print the following pattern. 

1       2       3       4       5
6       7       8       9       10
11      12      13      14      15

---------------------------------------------------------------------------------------------------------------------------------------------------------

3) Trailing Zeroes (File -> TrailingZeroes.cpp)

Ask the user for an integer and return the same, but without trailing zeroes.

Example: 
Input - 127800
Output - 1278 

---------------------------------------------------------------------------------------------------------------------------------------------------------

3) Weight Balance (File -> WeightBalance.cpp)
Source -> CodeChef

No play and eating all day makes your belly fat. This happened to Chef during the lockdown. His weight before the lockdown was w1​ kg (measured on the most accurate hospital machine) and after M months of lockdown, when he measured his weight at home (on a regular scale, which can be inaccurate), he got the result that his weight was w2​ kg (w2​>w1​).

Scientific research in all growing kids shows that their weights increase by a value between x1​ and x2​ kg (inclusive) per month, but not necessarily the same value each month. Chef assumes that he is a growing kid. Tell him whether his home scale could be giving correct results.

Input format - The first line of the input contains a single integer T denoting the number of test cases. 
The description of T test cases follows.
The first and only line of each test case contains five space-separated integers w1​, w2​, x1​, x2​ and M.

Constraints:
1 ≤ T ≤ 10^5
1 ≤ w1 ​< w2 ​≤ 100
100 ≤ x1 ​≤ x2 ​≤ 10
1 ≤ M ≤ 10

Sample input:
5
1 2 1 2 2
2 4 1 2 2
4 8 1 2 2
5 8 1 2 2
1 100 1 2 2

Sample output:
0
1
1
1
0


---------------------------------------------------------------------------------------------------------------------------------------------------------

4) Search Insert Position (File -> SearchInsertPosition.cpp) 
Source -> LeetCode

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [1,3,5,6], target = 5
Output: 2

Example 2:
Input: nums = [1,3,5,6], target = 2
Output: 1

Example 3:
Input: nums = [1,3,5,6], target = 7
Output: 4

Constraints:
1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums contains distinct values sorted in ascending order.
-104 <= target <= 104


---------------------------------------------------------------------------------------------------------------------------------------------------------
5) Way too long words (File -> WayTooLongWords.java)
Source -> CodeForces

Sometimes some words like "localization" or "internationalization" are so long that writing them many times in one text is quite tiresome.

Let's consider a word too long, if its length is strictly more than 10 characters. All too long words should be replaced with a special abbreviation.

This abbreviation is made like this: we write down the first and the last letter of a word and between them we write the number of letters between the first and the last letters. That number is in decimal system and doesn't contain any leading zeroes.

Thus, "localization" will be spelt as "l10n", and "internationalization» will be spelt as "i18n".

You are suggested to automatize the process of changing the words with abbreviations. At that all too long words should be replaced by the abbreviation and the words that are not too long should not undergo any changes.

Input:
The first line contains an integer n (1 ≤ n ≤ 100). Each of the following n lines contains one word. All the words consist of lowercase Latin letters and possess the lengths of from 1 to 100 characters.

Output:
Print n lines. The i-th line should contain the result of replacing of the i-th word from the input data.

Example: 
Input -
4
word
localization
internationalization
pneumonoultramicroscopicsilicovolcanoconiosis

Output - 
word
l10n
i18n
p43s


---------------------------------------------------------------------------------------------------------------------------------------------------------
6) Matrix Diagonal Sum (File -> MatrixDiagonalSum.cpp)
Source -> LeetCode

Given a square matrix mat, return the sum of the matrix diagonals.

Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.

Example 1:

Input: mat = [[1,2,3],
              [4,5,6],
              [7,8,9]]
Output: 25

Explanation: Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25
Notice that element mat[1][1] = 5 is counted only once.

Example 2:

Input: mat = [[1,1,1,1],
              [1,1,1,1],
              [1,1,1,1],
              [1,1,1,1]]
Output: 8


---------------------------------------------------------------------------------------------------------------------------------------------------------
7) Hulk (File -> Hulk.cpp)
Source -> CodeForces 

Dr. Bruce Banner hates his enemies (like others don't). As we all know, he can barely talk when he turns into the incredible Hulk. That's why he asked you to help him to express his feelings.

Hulk likes the Inception so much, and like that his feelings are complicated. They have n layers. The first layer is hate, second one is love, third one is hate and so on...

For example if n = 1, then his feeling is "I hate it" or if n = 2 it's "I hate that I love it", and if n = 3 it's "I hate that I love that I hate it" and so on.

Please help Dr. Banner.

Input: The only line of the input contains a single integer n (1 ≤ n ≤ 100) — the number of layers of love and hate.

Output: Print Dr.Banner's feeling in one line.

Example: 
Input:
1 
Output:
I hate it

Input:
2
Output:
I hate that I love it

Input:
3
Output:
I hate that I love that I hate it


---------------------------------------------------------------------------------------------------------------------------------------------------------
8) Valid Perfect Square (File -> ValidPerfectSquare.cpp) 
Source -> LeetCode

Given a positive integer num, write a function which returns True if num is a perfect square else False.

Follow up: Do not use any built-in library function such as sqrt.

Example 1:
Input: num = 16
Output: true

Example 2:
Input: num = 14
Output: false

Constraints:
1 <= num <= 2^31 - 1



---------------------------------------------------------------------------------------------------------------------------------------------------------
9) Missing Number (File -> MissingNumber.java) 
Source -> LeetCode 

Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

Example 1:
Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.

Example 2:
Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.

Example 3:
Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.

Contraints:
n == nums.length
1 <= n <= 104
0 <= nums[i] <= n
All the numbers of nums are unique.


---------------------------------------------------------------------------------------------------------------------------------------------------------
10) Check If N and Its Double Exist (File -> CheckIfNandItsDoubleExist.cpp)
Source -> LeetCode

Given an array arr of integers, check if there exists two integers N and M such that N is the double of M ( i.e. N = 2 * M).

More formally check if there exists two indices i and j such that :

i != j
0 <= i, j < arr.length
arr[i] == 2 * arr[j]

Example 1:
Input: arr = [10,2,5,3]
Output: true
Explanation: N = 10 is the double of M = 5,that is, 10 = 2 * 5.

Example 2:
Input: arr = [7,1,14,11]
Output: true
Explanation: N = 14 is the double of M = 7,that is, 14 = 2 * 7.

Example 3:
Input: arr = [3,1,7,11]
Output: false
Explanation: In this case does not exist N and M, such that N = 2 * M.

Constraints:
2 <= arr.length <= 500
-10^3 <= arr[i] <= 10^3


---------------------------------------------------------------------------------------------------------------------------------------------------------
11) Find Subarrays With Equal Sum (File -> FindSubarraysWithEqualSum.cpp) 
Source -> LeetCode

Given a 0-indexed integer array nums, determine whether there exist two subarrays of length 2 with equal sum. Note that the two subarrays must begin at different indices.

Return true if these subarrays exist, and false otherwise.

A subarray is a contiguous non-empty sequence of elements within an array.

Example: 
1) Input: nums = [4,2,4]
Output: true
Explanation: The subarrays with elements [4,2] and [2,4] have the same sum of 6.

2) Input: nums = [1,2,3,4,5]
Output: false
Explanation: No two subarrays of size 2 have the same sum.

3) Input: nums = [0,0,0]
Output: true
Explanation: The subarrays [nums[0],nums[1]] and [nums[1],nums[2]] have the same sum of 0. 
Note that even though the subarrays have the same content, the two subarrays are considered different because they are in different positions in the original array.
 
Constraints:

2 <= nums.length <= 1000
-109 <= nums[i] <= 109


---------------------------------------------------------------------------------------------------------------------------------------------------------
